name: Build and publish to PyPI

on:
  push:
    branches:
      - main
    paths:
      - 'stacks/**'
      - 'de_workloads/**'
      - 'pyproject.toml'
      - 'poetry.lock'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install poetry
        run: |
          python -m pip install poetry==1.8.3

      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        run: poetry install

      - name: Get Current pyproject.toml Version
        id: get_pyproject_version
        run: |
          CURRENT_VERSION=$(poetry version --short)
          echo "Current version from pyproject.toml: $CURRENT_VERSION"
          echo "::set-output name=current_version::$CURRENT_VERSION"

      - name: Get Latest Git Tag Version
        id: get_git_tag_version
        run: |
          # Get the latest tag from Git or set as 'none' if no tag exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")

          if [ "$LATEST_TAG" = "none" ]; then
            echo "No previous tag detected. Proceeding as a first release."
            echo "::set-output name=latest_version::none"
          else
            LATEST_VERSION=${LATEST_TAG#v}
            echo "Latest tag: $LATEST_TAG"
            echo "::set-output name=latest_version::$LATEST_VERSION"
          fi

      - name: Compare Versions
        id: version_check
        run: |
          CURRENT_VERSION="${{ steps.get_pyproject_version.outputs.current_version }}"
          LATEST_GIT_VERSION="${{ steps.get_git_tag_version.outputs.latest_version }}"

          if [ "$LATEST_GIT_VERSION" = "none" ]; then
            echo "No previous version detected. Proceeding with release."
            echo "::set-output name=should_release::true"
          elif [ "$CURRENT_VERSION" != "$LATEST_GIT_VERSION" ]; then
            echo "Version has changed from $LATEST_GIT_VERSION to $CURRENT_VERSION. Proceeding with release."
            echo "::set-output name=should_release::true"
          else
            echo "Version has not changed. Skipping release."
            echo "::set-output name=should_release::false"
          fi

      - name: Build Python Project
        if: steps.version_check.outputs.should_release == 'true'
        run: |
          poetry build

      - name: Create GitHub Release Tag
        if: steps.version_check.outputs.should_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG=$(poetry version --short)
          git tag "v$NEW_TAG"
          git push origin "v$NEW_TAG"
          gh release create "v$NEW_TAG" --title "Release v$NEW_TAG" --notes "Automated release of version $NEW_TAG"

      - name: Publish to PyPi Test
        if: steps.version_check.outputs.should_release == 'true'
        env:
          PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi $PYPI_TEST_TOKEN
          poetry publish -r test-pypi

      - name: Publish to PyPi
        if: steps.version_check.outputs.should_release == 'true'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish -r pypi
